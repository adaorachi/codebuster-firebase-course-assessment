rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Start by closing all access by default, then add what you need
    match /{document=**} {
      allow read, write: if false;
    }

    match /test/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // Add new rules here

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isUserExist() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isSignedInAndExist() {
      return isSignedIn() && isUserExist();
    }

    function isOwner(userId) {
      return request.auth.uid == existingData().uid || request.auth.uid == userId;
    }

    function isAdmin() {
  		return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin;
		}

    function fieldUpdateNotAllow(list) {
      return (!incomingData().keys().hasAny(list)) || (!incomingData().diff(existingData()).affectedKeys()
        .hasAny(list));
    }

    match /todos/{docId} {
      allow create: if isSignedInAndExist();
      allow read, update, delete: if isSignedInAndExist() && isOwner(docId);
    }

    match /users/{userId} {
      allow read: if isSignedInAndExist();
      allow create: if isSignedInAndExist() && isCreator(userId) && incomingData().uid == userId;
      allow update: if isSignedInAndExist()
      && ((isOwner(userId) && isCreator(userId)) || isAdmin())
      && fieldUpdateNotAllow(['isAdmin']);
      allow delete: if false;
    }
  }
}